<#+ 
void GenerateMessages(Type contractType, List<string> generatedMessages)
{
    var attr = contractType.GetAttribute<NetContractAttribute>();
    foreach (MethodInfo method in contractType.GetMethods())
    {
        var opAttr = method.GetAttribute<NetOperationAttribute>() ?? new NetOperationAttribute();
        string requestMsgName = contractType.Name+method.Name+"Request";
        string replyMsgName = contractType.Name+method.Name+"Reply";
        GenerateMessage(Misc.GenerateHash(requestMsgName), requestMsgName,
	        method.GetParameters().Select(x => Tuple.Create(x.ParameterType, x.Name)).ToList(),
	        opAttr.Priority, opAttr.Reliability);
	generatedMessages.Add(requestMsgName);
        if(method.ReturnType != typeof(void))
        {
            GenerateMessage(Misc.GenerateHash(replyMsgName), replyMsgName,
                new List<Tuple<Type, string>>{Tuple.Create(method.ReturnType, "RetVal")},
                opAttr.Priority, opAttr.Reliability);
		generatedMessages.Add(replyMsgName);
        }
    }
}
void GenerateMessage(uint msgId, string name, List<Tuple<Type, string>> parameters, MessagePriority messagePriority, MessageReliability messageReliability)
{#>
    public sealed class <#= name #> : Message
    {
<#+ foreach (var parameter in parameters)
    {	#>
        public <#= TypeToString(parameter.Item1) #> <#= parameter.Item2 #>;
<#+ } 	#>

        public override uint Id
        {
            get { return <#= msgId #>; }
        }

        public override void Serialize(BinaryWriter w)
        {
            base.Serialize(w);
<#+ foreach (var parameter in parameters)
    {
        WriteComplex(parameter.Item1, parameter.Item2);
    }	#>
        }

        public override void Deserialize(BinaryReader r)
        {
            base.Deserialize(r);
<#+ foreach (var parameter in parameters)
    {
        ReadComplex(parameter.Item1, parameter.Item2);
    }	#>
        }

        public override MessagePriority Priority { get { return MessagePriority.<#= messagePriority.ToString() #>; } }
        public override MessageReliability Reliability { get { return MessageReliability.<#= messageReliability.ToString() #>; } }
    }
<#+
}
#>
