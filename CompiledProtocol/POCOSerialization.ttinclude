<#+  
void GenerateSerialization(Type type) 
{
#>	
	public static class <#= type.Name+"Serializer" #>	
	{
		public static void Serialize(<#= type.Name #> x, OutPacket w)
		{
<#+ foreach (var field in type.GetFields())
		WriteComplex(field.FieldType, "x."+field.Name); #>
		}
		
		public static <#= type.Name #> Deserialize(InPacket r)
		{
			var ret = new <#= type.Name #>();
<#+ foreach (var field in type.GetFields())
		ReadComplex(field.FieldType, "ret."+field.Name); #>
			return ret;
		}
	}
<#+  
}
void WriteComplex(Type type, string name)
{
	if(IsAtomic(type))
		WriteAtomic(type, name);
 	else if(IsArray(type))
		WriteArray(type, name);
	else 
		WriteExternal(type, name);
}
void WriteExternal(Type type, string name)
{ #>
	<#= type.Name+"Serializer" #>.Serialize(<#= name #>, w);
<#+ 
}
void WriteAtomic(Type type, string name)
{ #>
			w.Write<#= GetAtomTypeName(type) #>(<#= name #>);
<#+
}
void WriteArray(Type type, string name)
{ #>
			w.WriteInt32(<#=  name.Length#>);
			foreach(var element in <#= name #>)
			<#+ WriteComplex(type.GetGenericArguments()[0], "element");

}
void ReadComplex(Type type, string name)
{
	if(IsAtomic(type))
		ReadAtomic(type, name);
 	else if(IsArray(type))
		ReadArray(type, name);
	else 
		ReadExternal(type, name);
}
void ReadExternal(Type type, string name)
{ #>
	<#= name #> = <#= type.Name+"Serializer" #>.Deserialize(r);
<#+ 
}
void ReadAtomic(Type type, string name)
{ #>
			<#= name #> = r.Read<#= GetAtomTypeName(type) #>();
<#+
}
void ReadArray(Type type, string name)
{ #>
			{
				int lenght = r.ReadInt32();
				var list = new List< <#= type.GetGenericArguments()[0] #> >(lenght);
				for(int i = 0; i < lenght; i++)
				{
				<#+ ReadComplex(type.GetGenericArguments()[0], "var x"); #>
					list.Add(x);
				}
				<#= name #> = list;
			}
<#+ 
}
bool IsAtomic(Type type)
{
	return type == typeof(byte)
	||type == typeof(short)
	||type == typeof(ushort)
	||type == typeof(int)
	||type == typeof(uint)
	||type == typeof(long)
	||type == typeof(ulong)
	||type == typeof(string);
}
bool IsArray(Type type)
{
	return type.IsGenericType && type.GetGenericTypeDefinition() == typeof(List<>);
}
string GetAtomTypeName(Type type)
{
	if(type == typeof(byte))
		return "Byte";
	if(type == typeof(short))
		return "Int16";
	if(type == typeof(ushort))
		return "UInt16";
	if(type == typeof(int))
		return "Int32";
	if(type == typeof(uint))
		return "UInt32";
	if(type == typeof(long))
		return "Int64";
	if(type == typeof(ulong))
		return "UInt64";
	if(type == typeof(string))
		return "String";
	
	throw new Exception("Cannot map type:"+type);
}
#>